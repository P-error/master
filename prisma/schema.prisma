// ---------- Prisma Client ----------
generator client {
  provider = "prisma-client-js"
}

// ---------- Database ----------
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Models ----------

model User {
  id       Int    @id @default(autoincrement())
  login    String @unique
  password String

  // Профиль (опциональные поля, взято из фактического дампа)
  age             Int?
  educationLevel  String?
  learningGoal    String?
  learningStyle   String?
  preferredFormat String?
  preferredTone   String?
  detailLevel     String?
  priorKnowledge  String?
  languageLevel   String?
  darkMode        Boolean @default(false)
  accessibleMode  Boolean @default(false)
  fontSize        String  @default("base")

  // Связи
  subjects           Subject[]
  questionTagResults QuestionTagResult[]
  chatMessages       ChatMessage[]
  tests              Test[] // <-- добавили связь с тестами

  // Метаданные
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatMessage {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id]) // прямая сторона

  role    String // 'user' | 'assistant' (можно валидировать на уровне приложения)
  content String

  createdAt DateTime @default(now())
}

model Subject {
  id         Int    @id @default(autoincrement())
  name       String
  difficulty String

  // Владелец предмета
  userId Int
  user   User @relation(fields: [userId], references: [id])

  // Метаданные
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tests Test[] // <-- тесты по предмету (опционально, если используешь subjectId)

  // Один и тот же пользователь не должен иметь дубликаты имён предметов
  @@unique([name, userId], name: "name_userId")
}

model QuestionTagResult {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  tags      String[] // <-- массив строк
  isCorrect Boolean?
  createdAt DateTime @default(now())
  testId    Int? // <-- нужен для привязки результата к тесту
  question  String? // <-- текст вопроса (если хочешь хранить)
  Test      Test?    @relation(fields: [testId], references: [id])
}

model Test {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id])

  subjectId Int?
  subject   Subject? @relation(fields: [subjectId], references: [id])

  topic        String
  difficulty   String
  numQuestions Int
  numOptions   Int
  score        Int
  questions    Json // сырой JSON с вопросами

  createdAt DateTime @default(now())
  // updatedAt можно добавить при желании:
  // updatedAt DateTime  @updatedAt

  // связь в обратную сторону из QuestionTagResult
  questionTagResults QuestionTagResult[]
}


model TestAttempt {
  id          Int      @id @default(autoincrement())
  userId      Int
  subjectId   Int
  topic       String
  difficulty  String
  total       Int
  correct     Int
  accuracy    Float
  byTag       Json
  byQuestion  Json
  rawQuestions Json
  rawAnswers   Json
  createdAt   DateTime @default(now())
  @@index([userId, subjectId, createdAt])
}
