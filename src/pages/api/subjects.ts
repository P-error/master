import type { NextApiRequest, NextApiResponse } from "next";
import { PrismaClient } from "@prisma/client";
import { verify } from "jsonwebtoken";
import { parse } from "cookie";

const prisma = new PrismaClient();

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  console.log("[subjects] API called:", req.method);

  // --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ---
  const cookies = req.headers.cookie ? parse(req.headers.cookie) : {};
  const token = cookies.token;
  if (!token) return res.status(401).json({ error: "Not authenticated" });

  let userId: number;
  try {
    const decoded = verify(token, process.env.JWT_SECRET || "dev_secret") as { userId: number };
    userId = decoded.userId;
  } catch {
    return res.status(401).json({ error: "Invalid token" });
  }

  // --- GET: —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ + —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
  if (req.method === "GET") {
    try {
      // –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Ö —Ç–µ—Å—Ç–∞–º–∏
      const subjects = await prisma.subject.findMany({
        where: { userId },
        include: { tests: true },
      });

      const subjectStats = subjects.map((s) => {
        const total = s.tests.reduce((acc, t) => acc + t.numQuestions, 0);
        const correct = s.tests.reduce((acc, t) => acc + t.score, 0);
        return {
          id: s.id,
          name: s.name,
          difficulty: s.difficulty,
          totalTests: total,
          accuracy: total > 0 ? Math.round((correct / total) * 100) : 0,
        };
      });

      return res.status(200).json({ subjects: subjectStats });
    } catch (err) {
      console.error("[subjects] Error (GET):", err);
      return res.status(500).json({ error: "Failed to fetch subjects" });
    }
  }

  // --- POST: —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ ---
  if (req.method === "POST") {
    const { name, difficulty } = req.body;

    if (!name || !difficulty) {
      return res.status(400).json({ error: "–ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    try {
      const subject = await prisma.subject.create({
        data: {
          name,
          difficulty,
          userId, // üîë –ø—Ä–∏–≤—è–∑–∫–∞ –∫ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        },
      });

      return res.status(200).json(subject);
    } catch (err) {
      console.error("[subjects] Error (POST):", err);
      return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞" });
    }
  }

  // --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ---
  return res.status(405).json({ error: "Method not allowed" });
}
